[
  {
    "timestamp": 1758122531195,
    "code": "import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Container, Typography, TextField, Button, Paper, Box } from \"@mui/material\";\r\nimport logo from \"../assets/logo.png\";\r\n\r\nfunction AdminLogin() {\r\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.status === 200) {\r\n        navigate(\"/dashboard\"); // Redirect after success\r\n      } else {\r\n        setError(data.message || \"Invalid credentials\");\r\n      }\r\n    } catch (err) {\r\n      setError(\"Server error, try again later\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: \"100vh\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        background: \"white\",\r\n      }}\r\n    >\r\n      <Container maxWidth=\"xs\">\r\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\r\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\r\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\r\n          </Box>\r\n\r\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\r\n            Admin Login\r\n          </Typography>\r\n\r\n          <TextField\r\n            fullWidth\r\n            label=\"Email\"\r\n            variant=\"outlined\"\r\n            value={credentials.email}\r\n            onChange={(e) => setCredentials({ ...credentials, email: e.target.value })}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            variant=\"outlined\"\r\n            value={credentials.password}\r\n            onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          {error && (\r\n            <Typography color=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Typography>\r\n          )}\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            fullWidth\r\n            sx={{\r\n              backgroundColor: \"#3498DB\",\r\n              color: \"#fff\",\r\n              py: 1.2,\r\n              fontSize: \"16px\",\r\n              borderRadius: \"8px\",\r\n            }}\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AdminLogin;\r\n"
  },
  {
    "timestamp": 1758125097758,
    "code": "import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Container, Typography, TextField, Button, Paper, Box } from \"@mui/material\";\r\nimport logo from \"../assets/logo.png\";\r\n\r\nfunction AdminLogin() {\r\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.status === 200) {\r\n        navigate(\"/dashboard\"); // Redirect after success\r\n      } else {\r\n        setError(data.message || \"Invalid credentials\");\r\n      }\r\n    } catch (err) {\r\n      setError(\"Server error, try again later\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: \"100vh\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        background: \"white\",\r\n      }}\r\n    >\r\n      <Container maxWidth=\"xs\">\r\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\r\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\r\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\r\n          </Box>\r\n\r\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\r\n            Admin Login\r\n          </Typography>\r\n\r\n          <TextField\r\n            fullWidth\r\n            label=\"Email\"\r\n            variant=\"outlined\"\r\n            value={credentials.email}\r\n            onChange={(e) => setCredentials({ ...credentials, email: e.target.value })}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            variant=\"outlined\"\r\n            value={credentials.password}\r\n            onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          {error && (\r\n            <Typography color=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Typography>\r\n          )}\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            fullWidth\r\n            sx={{\r\n              backgroundColor: \"#3498DB\",\r\n              color: \"#fff\",\r\n              py: 1.2,\r\n              fontSize: \"16px\",\r\n              borderRadius: \"8px\",\r\n            }}\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AdminLogin;\r\n"
  },
  {
    "timestamp": 1758125120630,
    "code": "import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Box } from \"@mui/material\";\n\nfunction AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\");\n      } else {\n        const { message } = await res.json();\n        setError(message || \"Invalid credentials\");\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: \"100vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"white\",\n      }}\n    >\n      <Container maxWidth=\"xs\">\n    // remaining code\n      </Container>\n    </Box>\n  );\n}"
  },
  {
    "timestamp": 1758125143658,
    "code": "import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Box } from \"@mui/material\";\n\nfunction AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\");\n      } else {\n        const data = await res.json();\n        setError(data.message || \"Invalid credentials\");\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  const handleChange = (e) => \n    setCredentials({ ...credentials, [e.target.name]: e.target.value });\n\n  return (\n    <Box sx={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"white\" }}>\n      <Container maxWidth=\"xs\">\n        // Add input fields and buttons here, using handleChange for inputs and handleLogin for form submission\n      </Container>\n    </Box>\n  );\n}"
  },
  {
    "timestamp": 1758125662675,
    "code": "function AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\"); \n      } else {\n        const data = await res.json();\n        setError(data.message || \"Invalid credentials\");\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  return (\n    <Box sx={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"white\" }}>\n      <Container maxWidth=\"xs\">\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\n          </Box>\n\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\n            Admin Login\n          </Typography>\n\n          <TextField fullWidth label=\"Email\" variant=\"outlined\" value={credentials.email} onChange={(e) => setCredentials((prev) => ({ ...prev, email: e.target.value }))} sx={{ mb: 2 }} />\n          <TextField fullWidth label=\"Password\" type=\"password\" variant=\"outlined\" value={credentials.password} onChange={(e) => setCredentials((prev) => ({ ...prev, password: e.target.value }))} sx={{ mb: 2 }} />\n\n          {error && <Typography color=\"error\" sx={{ mb: 2 }}>{error}</Typography>}\n\n          <Button variant=\"contained\" fullWidth sx={{ backgroundColor: \"#3498DB\", color: \"#fff\", py: 1.2, fontSize: \"16px\", borderRadius: \"8px\" }} onClick={handleLogin}>\n            Login\n          </Button>\n        </Paper>\n      </Container>\n      </Box>\n      );\n      }"
  },
  {
    "timestamp": 1758126146149,
    "code": "function AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\");\n      } else {\n        const { message } = await res.json();\n        setError(message || \"Invalid credentials\");\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  return (\n    <Box sx={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"white\" }}>\n      <Container maxWidth=\"xs\">\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\n          </Box>\n\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\n            Admin Login\n          </Typography>\n          <TextField \n            label=\"Email\" \n            value={credentials.email} \n            onChange={(e) => setCredentials({ ...credentials, email: e.target.value })} \n            fullWidth \n            margin=\"normal\" \n          />\n          <TextField \n            label=\"Password\" \n            type=\"password\" \n            value={credentials.password} \n            onChange={(e) => setCredentials({ ...credentials, password: e.target.value })} \n            fullWidth \n            margin=\"normal\" \n          />\n          {error && <Typography color=\"error\">{error}</Typography>}\n          <Button variant=\"contained\" onClick={handleLogin} fullWidth sx={{ mt: 2 }}>\n            Login\n          </Button>\n        </Paper>\n      </Container>\n    </Box>\n  );\n}"
  },
  {
    "timestamp": 1758126409584,
    "code": "function AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\");\n      } else {\n        const { message = \"Invalid credentials\" } = await res.json();\n        setError(message);\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  return (\n    <Box sx={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"white\" }}>\n      <Container maxWidth=\"xs\">\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\n          </Box>\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\n            Admin Login\n          </Typography>\n          {/* Add input fields and login button here */}\n          {error && <Typography color=\"error\">{error}</Typography>}\n        </Paper>\n      </Container>\n    </Box>\n  );\n}"
  },
  {
    "timestamp": 1758126447335,
    "code": "function AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\");\n      } else {\n        const { message = \"Invalid credentials\" } = await res.json();\n        setError(message);\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  return (\n    <Box sx={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"white\" }}>\n      <Container maxWidth=\"xs\">\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\n          </Box>\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\n            Admin Login\n          </Typography>\n          {/* Add input fields and login button here */}\n          {error && <Typography color=\"error\">{error}</Typography>}\n        </Paper>\n      </Container>\n    </Box>\n  );\n}"
  },
  {
    "timestamp": 1758127025710,
    "code": "function AdminLogin() {\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/admin-login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n\n      if (res.ok) {\n        navigate(\"/dashboard\");\n      } else {\n        const { message = \"Invalid credentials\" } = await res.json();\n        setError(message);\n      }\n    } catch {\n      setError(\"Server error, try again later\");\n    }\n  };\n\n  return (\n    <Box sx={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"white\" }}>\n      <Container maxWidth=\"xs\">\n        <Paper elevation={6} sx={{ p: 4, textAlign: \"center\", borderRadius: \"12px\" }}>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 2 }}>\n            <img src={logo} alt=\"Admin Logo\" style={{ height: 80 }} />\n          </Box>\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", color: \"#333\", mb: 3 }}>\n            Admin Login\n          </Typography>\n          {/* Login form elements go here */}\n          {/* Consider using a button to trigger handleLogin */}\n        </Paper>\n      </Container>\n    </Box>\n  );\n}\n\n"
  }
]